
Tetris

Welcome to the Tetris project! This Python-powered game delivers the classic falling-block action of Tetris, complete with vibrant Tetriminos, custom sound effects, and a remixed soundtrack. Whether you’re new to Python or honing skills from earlier projects in the Arcade & Atari Era Experiences repo, this is a fantastic way to dive into coding a game from scratch. You’ll rotate, drop, and stack blocks to clear lines and chase high scores—all while learning key programming concepts like lists, loops, and audio generation. Let’s break it down and get you started!

How to Run the Game

Prerequisites:

 You’ll need Python installed (version 3.6+ works great).

 You’ll also need two libraries:

pygame: For graphics, sound, and game mechanics.

numpy: For generating cool sound effects.

Install them with:

pip install pygame numpy

Clone the Repo: If you haven’t already, grab the whole repo:

git clone https://github.com/rhapsodic-legacy/Arcade_Arcadia.git

Navigate to This Folder: Head to the tetris folder:

cd Arcade_Arcadia/tetris

Run the Game: In your terminal or command line, type:

python tetris.py

Note: Ensure Tetris_remix.wav is in the folder. If it’s missing, comment out lines 62–64 in tetris.py to skip the music.


Play!: 

Use these keys to control the falling Tetriminos:

Left Arrow (←): Move left
Right Arrow (→): Move right
Down Arrow (↓): Speed up the drop
Up Arrow (↑): Rotate
Spacebar: Drop instantly to the bottom


How the Code Works

Don’t worry if Python feels a bit new—this section explains the code like a friendly guide showing you around a game arcade. The script (tetris.py) is built step-by-step to create a fun game while teaching you coding basics. Here’s what’s happening under the hood:

1. Setting Up the Basics

Libraries: We import pygame (for game visuals and sound), random (to pick Tetriminos randomly), and numpy (for sound effect magic).

Initialization: pygame.init() gets the game engine running, and pygame.mixer.init() sets up sound with a sample rate of 44100 Hz (standard audio quality).

Constants: Numbers like WIDTH = 475 and BOARD_HEIGHT = 20 define our game’s world—think of them as the rules we’ll follow. The grid is 10x20, with each cell 30x30 pixels.

Screen Setup: We create a 475x600 window with pygame.display.set_mode() and call it "Tetris" with a title.

2. Making Sounds

Function: generate_sound(frequency, duration): This creates beeps without sound files! It uses math (a sine wave) to make noises:

frequency decides the pitch (e.g., 440 Hz for a middle note).

duration is how long it lasts (e.g., 0.1 seconds for a quick beep).

numpy turns this into a sound wave, and pygame plays it in stereo (two channels for your speakers).

Sounds Used: A beep for moving (440 Hz), a higher one for rotating (523 Hz), a thud for landing (261 Hz), a chime for clearing lines (659 Hz), and a low tone for game over (196 Hz).

Music: Loads Tetris_remix.wav and loops it at 50% volume.

3. Game Objects

We define the Tetriminos and board as our key objects:

Tetriminos: A list called tetriminos holds seven shapes (I, O, T, S, Z, J, L), each with a colour (e.g., (0, 255, 255) for cyan) and four rotation shapes (lists of (x, y) coordinates).

Board: A 20x10 grid (board) starts empty (filled with None), storing colors when pieces land.

4. Setting Up the Game

Variables: score, level, and total_lines start at 0. fall_speed = 0.5 sets how fast pieces drop (in seconds), and game_over = False keeps things going.

First Piece: spawn_new_tetrimino() picks a random piece and starts it near the top-middle of the grid, with a preview of the next piece.

5. Game Logic

Spawning: spawn_new_tetrimino() places a new piece and ends the game if it can’t fit.

Movement: can_move() checks if a move or rotation stays in bounds and avoids collisions.

Landing: land_tetrimino() locks a piece in place, clears full rows, adds points (e.g., 40 for one line, scaled by level), speeds up the drop every 10 lines, and spawns a new piece.

6. The Game Loop

This is the heart of the game—it runs 60 times a second (thanks to clock.tick(60)):

Events: Checks if you close the window to stop the game.

Player Input: Left/Right moves the piece (with a beep), Down speeds it up, Up rotates (with a sound), and Space drops it instantly.

Falling: Every fall_speed seconds, the piece drops one row or lands if it hits something.

Drawing: Clears the screen to black, draws the board, falling piece, next piece preview, score, level, and controls—or "Game Over" if done—then updates with pygame.display.flip().

7. Cleaning Up

pygame.quit(): Shuts everything down when you’re done.


Ideas to Improve and Tweak the Code

You’ve got a working game—awesome! Now, let’s make it your own. Here are some fun ideas to play with, perfect for beginners looking to experiment. Don’t worry if these feel tricky; try one at a time and see what happens!

Speed It Up

What: Make pieces fall faster over time.

How: In land_tetrimino(), add fall_speed *= 0.95 to increase speed slightly each time.

Why: Adds challenge—can you keep up?

Hold Piece

What: Swap the current piece with a held one.

How: Add a held_type variable and swap it with current_type on a key press (e.g., pygame.K_h).

Why: Adds strategy, like modern Tetris.

More Sounds

What: Add a sound for instant drops.

How: Define drop_sound = generate_sound(300, 0.15) and play it in the Space event.

Why: Extra audio makes it feel alive!

Line Flash

What: Flash cleared lines before removing them.

How: Before deleting rows in land_tetrimino(), draw them white and pause briefly (pygame.time.wait(100)).

Why: Highlights your success visually.

Difficulty Levels

What: Start with a faster drop speed.

How: Set fall_speed = 0.5 - difficulty * 0.1 based on a difficulty variable (e.g., 0–3).

Why: Lets you pick your challenge.

Visual Flair

What: Add a ghost piece showing where it’ll land.

How: Calculate the lowest valid y with can_move() and draw it faintly with draw_tetrimino().

Why: Helps plan your moves.

Custom Colors

What: Randomize Tetrimino colors each game.

How: In spawn_new_tetrimino(), set tetriminos[current_type]['color'] to random RGB values.

Why: Keeps every game fresh!


Learning Takeaways

This project teaches you:

Lists: Managing the grid and Tetrimino shapes.

Loops: Running the game and checking rows.

Conditionals: Deciding when pieces land or the game ends.

Functions: Reusable code for movement and drawing.
Sound: Basics of audio programming with numpy.

Feel free to tweak, break, and fix things—that’s how you learn! If something goes wrong, print variables (like print(current_x)) to debug, or ask for help in our repo’s Issues section.


Contributing

Love this game? Have an idea? Open a pull request or issue on the Arcade_Arcadia repo (https://github.com/rhapsodic-legacy/Arcade_Arcadia). Let’s keep building and learning together!

Happy coding, and enjoy stacking those Tetriminos!

